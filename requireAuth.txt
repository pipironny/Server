function requireAuth(req, res, next) {
  const authHeader = req.headers.authorization;

  if (!authHeader) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  const [authType, authToken] = authHeader.split(' ');

  if (authType !== 'Bearer' || !authToken) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  try {
    const decodedToken = jwt.verify(authToken, process.env.JWT_SECRET);
    req.user = decodedToken;
    next();
  } catch (err) {
    console.error(err);
    return res.status(401).json({ message: 'Unauthorized' });
  }
}

В этом примере мы сначала проверяем наличие заголовка авторизации в запросе. Если он отсутствует, мы возвращаем ответ с кодом 401 и сообщением "Unauthorized". Если заголовок присутствует, мы разделяем его на две части: тип авторизации (Bearer) и токен. Если тип авторизации не соответствует "Bearer" или токен отсутствует, мы также возвращаем ответ с кодом 401 и сообщением "Unauthorized".

Если тип авторизации и токен корректны, мы используем jwt.verify() для проверки токена и декодирования его содержимого. Если токен действительный, мы сохраняем декодированные данные пользователя в объекте req.user и передаем управление следующей функции с помощью вызова next(). Если токен недействительный, мы возвращаем ответ с кодом 401 и сообщением "Unauthorized".

Вы можете использовать эту функцию промежуточного ПО для защиты маршрута /api/attendance/all следующим образом:

router.get("/api/attendance/all", requireAuth, (req, res)=>{
    connection.query('SELECT * FROM `attendance`', (err, result, fields) =>{
        if (err){
            console.error("Ошибка подключения " + err.message);
            res.status(500).send('Internal Server Error');
            return;
        }
        else{
           res.send(result);
           //console.log(result);
        }
    });
});
